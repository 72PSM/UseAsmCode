<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UseAsmCode</name>
    </assembly>
    <members>
        <member name="T:UseAsmCode.Invoker">
            <summary>
            Класс, предоставляющий методы для вызова двоичного машинного кода.
            </summary>
        </member>
        <member name="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])">
            <summary>
            Передаёт управление машинному коду.
            </summary>
            <param name="firstAsmArg"> Первый аргумент, передаваемый машинному коду. При использовании SASM доступен как $first. </param>
            <param name="secondAsmArg"> Второй аргумент, передаваемый машинному коду. При использовании SASM доступен как $second. </param>
            <param name="code"> Двоичный код, которому будет передано управление. </param>
            <returns> Возвращается значение EAX после выполнения машинного кода. </returns>
        </member>
        <member name="M:UseAsmCode.Invoker.SafeInvokeAsm``3(``0@,``1@,System.Byte[])">
            <summary>
            Обёртка над <see cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>, позволяющая вместо указателей передавать объекты
            (в т.ч. и управляемые), а также уточнять тип возвращаемого значения.
            </summary>
            <typeparam name="T1"> Тип первого аргумента машинного кода. </typeparam>
            <typeparam name="T2"> Тип второго аргумента машинного кода. </typeparam>
            <typeparam name="Tret"> Тип возвращаемого значения. </typeparam>
            <param name="firstAsmArg"> Первый аргумент, передаваемый машинному коду. При использовании SASM доступен как $first. </param>
            <param name="secondAsmArg"> Второй аргумент, передаваемый машинному коду. При использовании SASM доступен как $second. </param>
            <param name="code"> Двоичный код, которому будет передано управление. </param>
            <returns> 
            Возвращается объект типа <typeparamref name="Tret"/>, на который указывает указатель, возвращаемый
            InvokeAsm(<paramref name="firstAsmArg"/>, <paramref name="secondAsmArg"/>, <paramref name="code"/>).
            </returns>
            <seealso cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>
        </member>
        <member name="M:UseAsmCode.Invoker.SafeInvokeAsm``2(``0@,``1@,System.Byte[])">
            <summary>
            Обёртка над <see cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>, 
            позволяющая вместо указателей передавать объекты (в т.ч. и управляемые). <br/>
            Используется для вызова машинного кода, который ничего не возвращает (значение EAX игнорируется).
            </summary>
            <typeparam name="T1"> Тип первого аргумента машинного кода. </typeparam>
            <typeparam name="T2"> Тип второго аргумента машинного кода. </typeparam>
            <param name="firstAsmArg"> Первый аргумент, передаваемый машинному коду. При использовании SASM доступен как $first. </param>
            <param name="secondAsmArg"> Второй аргумент, передаваемый машинному коду. При использовании SASM доступен как $second. </param>
            <param name="code"> Двоичный код, которому будет передано управление. </param>
            <seealso cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>
        </member>
        <member name="M:UseAsmCode.Invoker.SafeInvokeAsm``3(``0@,``1@,UseAsmCode.SASMCode)">
            <summary>
            Обёртка над <see cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>, позволяющая вместо указателей передавать объекты 
            (в т.ч. и управляемые), а также уточнять тип возвращаемого значения.
            </summary>
            <typeparam name="T1"> Тип первого аргумента машинного кода. </typeparam>
            <typeparam name="T2"> Тип второго аргумента машинного кода. </typeparam>
            <typeparam name="Tret"> Тип возвращаемого значения. </typeparam>
            <param name="firstAsmArg"> Первый аргумент, передаваемый машинному коду. При использовании SASM доступен как $first. </param>
            <param name="secondAsmArg"> Второй аргумент, передаваемый машинному коду. При использовании SASM доступен как $second. </param>
            <param name="code"> Объект, описывающий SASM-код, которому будет передано управление. </param>
            <returns> 
            Возвращается объект типа <typeparamref name="Tret"/>, на который указывает указатель, возвращаемый
            InvokeAsm(<paramref name="firstAsmArg"/>, <paramref name="secondAsmArg"/>, <paramref name="code"/>).
            </returns>
            <seealso cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>
            <seealso cref="T:UseAsmCode.SASMCode"/>
        </member>
        <member name="M:UseAsmCode.Invoker.SafeInvokeAsm``2(``0@,``1@,UseAsmCode.SASMCode)">
            <summary>
            Обёртка над <see cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>, 
            позволяющая вместо указателей передавать объекты (в т.ч. и управляемые). <br/>
            Используется для вызова машинного кода, который ничего не возвращает (значение EAX игнорируется).
            </summary>
            <typeparam name="T1"> Тип первого аргумента машинного кода. </typeparam>
            <typeparam name="T2"> Тип второго аргумента машинного кода. </typeparam>
            <param name="firstAsmArg"> Первый аргумент, передаваемый машинному коду. При использовании SASM доступен как $first. </param>
            <param name="secondAsmArg"> Второй аргумент, передаваемый машинному коду. При использовании SASM доступен как $second. </param>
            <param name="code"> Объект, описывающий SASM-код, которому будет передано управление. </param>
            <seealso cref="M:UseAsmCode.Invoker.InvokeAsm(System.Void*,System.Void*,System.Byte[])"/>
            <seealso cref="T:UseAsmCode.SASMCode"/>
        </member>
        <member name="M:UseAsmCode.Invoker.ToInstance``1(System.IntPtr)">
            <summary>
            Позволяет получить объект заданного типа (в т.ч. управляемый) из указателя на него. <br/>
            Не работает с указателями на примитивные типы и на указатели.
            </summary>
            <typeparam name="Tout"> Тип объекта, находящегося по адресу, заданному указателем. </typeparam>
            <param name="ptr"> Указатель на объект типа <typeparamref name="Tout"/>. </param>
            <returns> Объект типа <typeparamref name="Tout"/>, находящийся по адресу <paramref name="ptr"/>. </returns>
        </member>
        <member name="M:UseAsmCode.Invoker.ToInstance``1(System.Void*)">
            <summary>
            Позволяет получить объект заданного типа (в т.ч. управляемый) из указателя на него. <br/>
            Не работает с указателями на примитивные типы и на указатели.
            </summary>
            <typeparam name="Tout"> Тип объекта, находящегося по адресу, заданному указателем. </typeparam>
            <param name="ptr"> Указатель на объект типа <typeparamref name="Tout"/>. </param>
            <returns> Объект типа <typeparamref name="Tout"/>, находящийся по адресу <paramref name="ptr"/>. </returns>
        </member>
        <member name="M:UseAsmCode.Invoker.ToPointer``1(``0@)">
            <summary>
            Позволяет получить указатель на заданный объект (в т.ч. управляемый).
            </summary>
            <typeparam name="T"> Тип объекта, указатель на который требуется получить. </typeparam>
            <param name="obj"> Объект, указатель на который требуется получить. </param>
            <returns> Указатель на объект <paramref name="obj"/>. </returns>
        </member>
        <member name="M:UseAsmCode.Invoker.ToIntPtr``1(``0@)">
            <summary>
            Позволяет получить указатель на заданный объект (в т.ч. управляемый).
            </summary>
            <typeparam name="T"> Тип объекта, указатель на который требуется получить. </typeparam>
            <param name="obj"> Объект, указатель на который требуется получить. </param>
            <returns> Указатель на объект <paramref name="obj"/>. </returns>
        </member>
        <member name="T:UseAsmCode.SASMCode">
            <summary>
            Класс, позволяющий транслировать команды ассемблера в двоичный машинный код,
            а также получать значения переменных, объявленных в нём.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.SASMTranslationException">
            <summary>
            Класс, описывающий исключения, возникающие при трансляции ассемблерного кода в его двоичное представление.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.SASMTranslationException.Reason">
            <summary>
            Объект, попытка трансляции которого вызвала исключение. <br/>
            Как правило, представляет из себя одну ассемблерную инструкцию.
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode.SASMTranslationException.#ctor(System.String)">
            <summary>
            Конструктор, используемый, если объект, вызвавший исключение, на данный момент неизвестен.
            Объект может быть задан позже.
            </summary>
            <param name="Message"> Сообщение, описывающее причину исключения. </param>
            <seealso cref="M:UseAsmCode.SASMCode.SASMTranslationException.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.SASMTranslationException.#ctor(System.String,System.Object)">
            <summary>
            Конструктор, используемый, если объект, вызвавший исключение, известен.
            </summary>
            <param name="Message"> Сообщение, описывающее причину исключения. </param>
            <param name="Reason"> Объект, попытка трансляции которого вызвала исключение. </param>
            <seealso cref="M:UseAsmCode.SASMCode.SASMTranslationException.#ctor(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.SASMTranslationException.ToString">
            <summary>
            Возвращает строковое представление исключения.
            </summary>
            <returns> Возвращает конкатенацию сообщения об ошибке и строкового представления объекта <see cref="F:UseAsmCode.SASMCode.SASMTranslationException.Reason"/>. </returns>
        </member>
        <member name="T:UseAsmCode.SASMCode.Prefixes">
            <summary>
            Перечисление, задающее двоичный код префиксов, которые может иметь инструкция.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.Registers">
            <summary>
            Перечисление, задающее двоичный код 32-, 16- и 8-битных регистров процессора.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.Jumps">
            <summary>
            Перечисление, задающее двоичный код различных условных переходов.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.Operand">
            <summary>
            Класс, описывающий операнд инструкции.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.Operand.OpType">
            <summary>
            Перечисление, описывающее возможные типы операндов.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.OperandType">
            <summary>
            Тип операнда.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Base">
            <summary>
            Базовый регистр, если операнд является адресом (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Address"/>).
            </summary>
            <remarks> 
            Формат адресного операнда: 
            [&lt;Base&gt; + $lt;Index&gt;*&lt;Scale&gt; + &lt;Offset&gt;]. 
            </remarks>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Index">
            <summary>
            Масштабный индексный регистр, если операнд является адресом (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Address"/>).
            </summary>
            <remarks> 
            Формат адресного операнда: 
            [&lt;Base&gt; + $lt;Index&gt;*&lt;Scale&gt; + &lt;Offset&gt;]. 
            </remarks>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Scale">
            <summary>
            <para> Масштабный множитель, если операнд является адресом (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Address"/>). </para>
            <list type="bullet">
            <listheader> Соответствие значений <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> и масштабных множителей: </listheader><br/>
            <item>
            <term> <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> = 0b00 </term> :
            <description> *1 </description>
            </item><br/>
            <item>
            <term> <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> = 0b01 </term> :
            <description> *2 </description>
            </item><br/>
            <item>
            <term> <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> = 0b10 </term> :
            <description> *4 </description>
            </item><br/>
            <item>
            <term> <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> = 0b11 </term> :
            <description> *8 </description>
            </item><br/>
            <item>
            <term> <see cref="F:UseAsmCode.SASMCode.Operand.Scale"/> = 255 </term> :
            <description> Масштабный множитель отсутствует. </description>
            </item><br/>
            </list>
            </summary>
            <remarks> 
            Формат адресного операнда: 
            [&lt;Base&gt; + $lt;Index&gt;*&lt;Scale&gt; + &lt;Offset&gt;]. 
            </remarks>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Offset">
            <summary>
            Числовое смещение, если операнд является адресом (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Address"/>).
            </summary>
            <remarks> 
            Формат адресного операнда: 
            [&lt;Base&gt; + $lt;Index&gt;*&lt;Scale&gt; + &lt;Offset&gt;]. 
            </remarks>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Value">
            <summary>
            Значение, если операнд является числовой константой (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Const"/>).
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.Register">
            <summary>
            Регистр, если операнд является регистром (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Register"/>).
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand.StringOperand">
            <summary>
            Строковое представление операнда.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Operand._codeObj">
            <summary>
            Объект, предоставляющий список доступных (<see cref="F:UseAsmCode.SASMCode._consts"/>) и недоступных (<see cref="F:UseAsmCode.SASMCode._removedConsts"/>) констант.
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand.#ctor(UseAsmCode.SASMCode,System.String)">
            <summary>
            Конструктор, создающий описание операнда путём парсинга его строкового представления.
            </summary>
            <param name="CodeObj"> Объект типа <see cref="T:UseAsmCode.SASMCode"/>, предоставляющий список доступных 
            (<see cref="F:UseAsmCode.SASMCode._consts"/>) и недоступных (<see cref="F:UseAsmCode.SASMCode._removedConsts"/>) констант. </param>
            <param name="strOperand"> Строковое представление операнда. </param>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand.ToString">
            <summary>
            Возвращает строковое представление операнда.
            </summary>
            <returns> Строковое представление операнда. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand._createRegisterOperand">
            <summary>
            Метод, проверяющий, является ли создаваемый операнд регистровым, и если да - создающий его.
            </summary>
            <returns> Булево значение, показывающее, был ли создан регистровый операнд. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand._createConstantOperand">
            <summary>
            Метод, проверяющий, является ли создаваемый операнд константным, и если да - создающий его.
            </summary>
            <returns> Булево значение, показывающее, был ли создан константный операнд. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand._createAddressOperand(System.Boolean)">
            <summary>
            Метод, создающий адресный операнд.
            </summary>
            <param name="sizeFlag"> Булево значение, задающее размерность адресного операнда (<c>true</c> - 8 бит, <c>false</c> - 16/32 бита). </param>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand._sumAllNums(System.String)">
            <summary>
            Суммирует все числовые слагаемые в строке с учётом их знаков.
            </summary>
            <param name="str"> Строка, слагаемые в которой требуется просуммировать. </param>
            <returns> Строка <paramref name="str"/>, в которой все числовые слагаемые заменены единственной суммой. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Operand._isConstant(System.String)">
            <summary>
            Проверяет, что содержимое строки является числовой константой.
            Поддерживаются шестнадцатеричные константы, а также константы со знаком.
            </summary>
            <param name="val"> Строка, которую требуется проверить. </param>
            <returns> Булево значение, показывающее, является ли содержимое строки <paramref name="val"/> числовой константой. </returns>
        </member>
        <member name="T:UseAsmCode.SASMCode.Instruction">
            <summary>
            Класс, описывающий инструкцию ассемблера.
            </summary>
        </member>
        <member name="T:UseAsmCode.SASMCode.Instruction.TransferType">
            <summary>
            Перечисление, описывающее операнды-приёмники и операнды-источники инструкций.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.InstrPrefixes">
            <summary>
            Список двоичных кодов префиксов инструкции.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.StringInstrPrefixes">
            <summary>
            Список строковых представлений префиксов инструкции.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.Command">
            <summary>
            Мнемоника машинной команды.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.Arguments">
            <summary>
            Список операндов инструкции.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.Offset">
            <summary>
            Смещение инструкции относительно начала SASM-кода.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction.ByteCode">
            <summary>
            Двоичный код инструкции.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction._codeObj">
            <summary>
            Объект типа <see cref="T:UseAsmCode.SASMCode"/>, используемый для парсинга операндов и рассчёта смещения символьных операндов.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Instruction._isRelativeOffset">
            <summary>
            Флаг, показывающий, нужно ли использовать в символьных операндах относительное смещение (относительно начала SASM-кода)
            или же абсолютное (относительно начала адресного пространства процесса).
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction.#ctor(UseAsmCode.SASMCode,System.String)">
            <summary>
            Конструктор, создающий описание инструкции путём парсинга её строкового представления.
            </summary>
            <param name="CodeObj"> Объект типа <see cref="T:UseAsmCode.SASMCode"/>, используемый для парсинга операндов и рассчёта смещения символьных операндов. </param>
            <param name="Line"> Строковое представление инструкции. </param>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction.ToString">
            <summary>
            Возвращает строковое представление инструкции.
            </summary>
            <returns> Строковое представление инструкции. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._checkTransfer(UseAsmCode.SASMCode.Instruction.TransferType,UseAsmCode.SASMCode.Instruction.TransferType)">
            <summary>
            Проверяет допустимость сочетания операндов, в частности - совпадение размеров приёмника и источника.
            </summary>
            <param name="transfer1"> Тип операнда-приёмника. </param>
            <param name="transfer2"> Тип операнда-источника. </param>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._getDWORDVal(System.Int32,System.Byte)">
            <summary>
            Преобразует число в его байтовое представление.
            </summary>
            <param name="Val"> Число для преобразования. </param>
            <param name="AvailibleSizes"> Возможные размеры результата (в байтах). Как правило, используются размеры 8, 16, 32 или их сочетания. </param>
            <returns> 
            Массив байт длины, допускаемой <paramref name="AvailibleSizes"/>, содержащий байтовое представление <paramref name="Val"/>.
            </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._getModRM(System.Boolean)">
            <summary>
            Возвращает байт ModR/M для данной инструкции, а также (при необходимости) байт SIB и байты смещения.
            </summary>
            <param name="FirstOnly"> Следует ли использовать только первый операнд двуоперандной инструкциии. </param>
            <returns> Массив байт, содержащий ModR/M, а также(опционально) SIB и смещение. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.Instruction._getSIB(UseAsmCode.SASMCode.Operand)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._getSIB(UseAsmCode.SASMCode.Operand)">
            <summary>
            Возвращает байт SIB для заданного операнда.
            </summary>
            <param name="operand"> Операнд с типом <see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Address"/>. </param>
            <returns> Байт SIB. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._setOffset32">
            <summary>
            Используется в качестве callback-а для задания 32-битного смещения или 32-битной числовой константы в инструкциях,
            где один из операндов - символьный (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Symbolic"/>).
            </summary>
            <seealso cref="M:UseAsmCode.SASMCode.Instruction._setOffset8"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._setOffset8">
            <summary>
            Используется в качестве callback-а для задания 8-битного смещения или 8-битной числовой константы в инструкциях,
            где один из операндов - символьный (<see cref="F:UseAsmCode.SASMCode.Operand.OperandType"/> = <see cref="F:UseAsmCode.SASMCode.Operand.OpType.Symbolic"/>).
            </summary>
            <seealso cref="M:UseAsmCode.SASMCode.Instruction._setOffset32"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._getByteCode">
            <summary>
            Возвращает двоичный код данной инструкции.
            </summary>
            <returns> Массив, содержащий байты двоичного машенного кода инструкции. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Instruction._getRelativeLabelOffset(System.String)">
            <summary>
            Возвращает смещение метки относительно данной инструкции.
            </summary>
            <param name="LabelName"> Имя метки, смещение которой требуется вычислить. </param>
            <returns> Относительное смещение метки с именем <paramref name="LabelName"/>. </returns>
        </member>
        <member name="T:UseAsmCode.SASMCode.Label">
            <summary>
            Класс, описывающий метку.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Label.Name">
            <summary>
            Имя метки.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Label.CommandOffset">
            <summary>
            Смещение относительно начала SASM-кода в командах.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Label.Offset">
            <summary>
            Смещение относительно начала SASM-кода в байтах.
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode.Label.#ctor(System.String,System.Int32)">
            <summary>
            Конструктор, создающий метку с заданным именем и заданным смещением в командах.
            </summary>
            <param name="Name"> Имя метки. </param>
            <param name="CommandOffset"> Смещение относительно начала SASM-кода в командах. </param>
        </member>
        <member name="M:UseAsmCode.SASMCode.Label.GetOffset(System.Collections.Generic.IEnumerable{UseAsmCode.SASMCode.Label},System.String)">
            <summary>
            Возвращает смещение в байтах метки с заданным именем, выбираемой из заданного набора меток.
            </summary>
            <param name="Labels"> Набор меток, в котором ищется метка с именем <paramref name="Name"/>. </param>
            <param name="Name"> Имя метки, смещение которой требуется получить. </param>
            <returns> Смещение метки <paramref name="Name"/> относительно начала SASM-кода в байтах. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Label.Equals(System.Object)">
            <summary>
            Метод, проверяющий, совпадает ли метка с данной. Метки считаются совпадающими, если они имеют одно и то же имя.
            </summary>
            <param name="obj"> Метка, которую требуется проверить на совпадение с текущей. </param>
            <returns> Булево значение, показывающее, совпадают ли метки. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.Label.GetHashCode">
            <summary>
            Метод, возвращающий хеш-код метки.
            </summary>
            <returns> Хеш-код метки. </returns>
        </member>
        <member name="F:UseAsmCode.SASMCode.LoadedLibraries">
            <summary>
            Словарь, содержащий загруженные внешние библиотеки. Ключами являются имена библиотек, а значениями - адреса их точек входа.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.VariableIndexes">
            <summary>
            Словарь, содержащий индексы начала переменных в массиве <see cref="F:UseAsmCode.SASMCode.Code"/>.
            Ключами являются имена переменных, а значениями - их индексы.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode.Code">
            <summary>
            Двоичное представление SASM-кода.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._sSASMProlog">
            <summary>
            SASM-код пролога, сохраняющий состояние процессора.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._sSASMEpilog">
            <summary>
            SASM-код эпилога, восстанавливающий состояние процессора.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._externs">
            <summary>
            Словарь, содержащий внешние процедуры. Ключами являются имена процедур, а значениями - их адреса.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._labels">
            <summary>
            Список всех меток, описанных в SASM-коде.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._variableLabels">
            <summary>
            Список меток, относящихся к переменным.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._consts">
            <summary>
            Словарь констант, доступных в текущий момент. Ключами являются имена констант, а значениями - их значения.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._lines">
            <summary>
            Список строк SASM-кода после их частичной обработки.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._instructions">
            <summary>
            Массив инструкций, из которых состоит SASM-код.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._initialVarValues">
            <summary>
            Словарь начальных значений переменных. Ключами являются имена переменных, а значениями - байтовые представления их начальных значений.
            </summary>
        </member>
        <member name="F:UseAsmCode.SASMCode._removedConsts">
            <summary>
            Список имён констант, которые были объявлены, а потом удалены. Содержит аргументы и локальные переменные процедур.
            </summary>
        </member>
        <member name="E:UseAsmCode.SASMCode._labelOffsetsComputed">
            <summary>
            Событие, возникающее после подсчёта смещений в байтах всех меток.
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode.op_Explicit(UseAsmCode.SASMCode)~System.Byte[]">
            <summary>
            Оператор, преобразовывающий объект <see cref="T:UseAsmCode.SASMCode"/> в его двоичный код (возвращает свойство <see cref="F:UseAsmCode.SASMCode.Code"/>).
            </summary>
            <param name="obj"> Объект <see cref="T:UseAsmCode.SASMCode"/>, чей двоичный код требуется получить. </param>
            <seealso cref="F:UseAsmCode.SASMCode.Code"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.#ctor(System.String,System.Func{System.String,System.IntPtr},System.Boolean,System.Boolean)">
            <summary>
            Конструктор, создающий объект <see cref="T:UseAsmCode.SASMCode"/> из текстового SASM-кода. <br/>
            Эта перегрузка позволяет задать пользовательскую функцию для загрузки внешних библиотек.
            </summary>
            <param name="AsmCode"> Текстовый SASM-код. </param>
            <param name="LibraryLoader"> 
            Функция, используемая для загрузки внешних библиотек. Должна принимать имя библиотеки и возвращать адрес её точки входа. 
            </param>
            <param name="DebugFlag"> Флаг, демонстрирующий, нужно ли в отладочных целях в начало SASM-кода добавлять инструкцию int3. </param>
            <param name="AddProlog"> 
            Флаг, демонстрирующий, нужно ли в начало SASM-кода добавлять пролог <see cref="F:UseAsmCode.SASMCode._sSASMProlog"/>, сохраняющий состояние процессора.
            </param>
            <seealso cref="M:UseAsmCode.SASMCode.#ctor(System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Конструктор, создающий объект <see cref="T:UseAsmCode.SASMCode"/> из текстового SASM-кода. <br/>
            Эта перегрузка для загрузки внешних библиотек использует кеширование и функцию LoadLibrary из библиотеки kernel32.dll.
            </summary>
            <param name="AsmCode"> Текстовый SASM-код. </param>
            <param name="DebugFlag"> Флаг, демонстрирующий, нужно ли в отладочных целях в начало SASM-кода добавлять инструкцию int3. </param>
            <param name="AddProlog"> 
            Флаг, демонстрирующий, нужно ли в начало SASM-кода добавлять пролог <see cref="F:UseAsmCode.SASMCode._sSASMProlog"/>, сохраняющий состояние процессора.
            </param>
            <seealso cref="M:UseAsmCode.SASMCode.#ctor(System.String,System.Func{System.String,System.IntPtr},System.Boolean,System.Boolean)"/>
            <seealso cref="M:UseAsmCode.SASMCode._defaultLibraryLoader(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetStringCode(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Метод, позволяющий получить строковое представление двоичного кода данного объекта <see cref="T:UseAsmCode.SASMCode"/>.
            Возвращаемая строка имеет формат, удобный для копирования в C#-код в качестве содержимого байтового массива,
            а также опциональные комментарии, описывающие соответствие двоичного кода и текстовых инструкций.
            </summary>
            <param name="IsHex">
            Флаг, демонстрирующий, должны ли использоваться шестнадцатеричные значения байтов двоичного кода вместо десятичных. 
            </param>
            <param name="IsReadable">
            Флаг, демонстрирующий, необходимо ли добавлять комментарии, описывающие соответствие двоичного кода и текстовых инструкций.
            </param>
            <param name="IsLined"> Флаг, демонстрирующий, необходимо ли добавлять переносы строки между инструкциями. </param>
            <returns> Строковое представление двоичного кода данного объекта <see cref="T:UseAsmCode.SASMCode"/>. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetBYTEVariable(System.String)">
            <summary>
            Метод, позволяющий получить значение однобайтовой переменной, объявленной в SASM-коде, по её имени.
            </summary>
            <param name="VariableName"> Имя однобайтовой переменной. </param>
            <returns> Значение переменной с именем <paramref name="VariableName"/>. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.GetWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetDWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWStringVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetAStringVariable(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetWORDVariable(System.String)">
            <summary>
            Метод, позволяющий получить значение двубайтовой переменной, объявленной в SASM-коде, по её имени.
            </summary>
            <param name="VariableName"> Имя двубайтовой переменной. </param>
            <returns> Значение переменной с именем <paramref name="VariableName"/>. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.GetBYTEVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetDWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWStringVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetAStringVariable(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetDWORDVariable(System.String)">
            <summary>
            Метод, позволяющий получить значение четырёхбайтовой переменной, объявленной в SASM-коде, по её имени.
            </summary>
            <param name="VariableName"> Имя четырёхбайтовой переменной. </param>
            <returns> Значение переменной с именем <paramref name="VariableName"/>. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.GetBYTEVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWStringVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetAStringVariable(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetWStringVariable(System.String)">
            <summary>
            Метод, позволяющий получить значение переменной, объявленной в SASM-коде и представляющей Unicode-строку, по её имени.
            </summary>
            <param name="VariableName"> Имя переменной, представляющей Unicode-строку. </param>
            <returns> Значение переменной с именем <paramref name="VariableName"/>. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.GetBYTEVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetDWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetAStringVariable(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.GetAStringVariable(System.String)">
            <summary>
            Метод, позволяющий получить значение переменной, объявленной в SASM-коде и представляющей ASCII-строку, по её имени.
            </summary>
            <param name="VariableName"> Имя переменной, представляющей ASCII-строку. </param>
            <returns> Значение переменной с именем <paramref name="VariableName"/>. </returns>
            <seealso cref="M:UseAsmCode.SASMCode.GetBYTEVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetDWORDVariable(System.String)"/>
            <seealso cref="M:UseAsmCode.SASMCode.GetWStringVariable(System.String)"/>
        </member>
        <member name="M:UseAsmCode.SASMCode.RestoreVariables">
            <summary>
            Метод, позволяющий восстановить начальные значения переменных, объявленных в SASM-коде.
            </summary>
        </member>
        <member name="M:UseAsmCode.SASMCode._defaultLibraryLoader(System.String)">
            <summary>
            Метод, загружающий внешнюю библиотеку с заданным именем в случае, если она не была загружена ранее, и возвращающий адрес её точки входа.
            </summary>
            <param name="Name"> Имя внешней библиотеки. </param>
            <returns> Адрес точки входа внешней библиотеки с именем <paramref name="Name"/>. </returns>
        </member>
        <member name="M:UseAsmCode.SASMCode._getDArgs(System.String,System.Int32,System.Int32)">
            <summary>
            Возвращает байтовое представление переменной, значение которой задано с помощью db, dw или dd.
            Поддерживаются строковые переменные, а также повторения с помощью dup.
            </summary>
            <param name="strArgs"> Строка, задающая значение переменной. </param>
            <param name="size"> Размер каждого элемента переменной. Для db - 1, для dw - 2, для dd - 4. </param>
            <param name="rep"> 
            Количество повторений <paramref name="strArgs"/>. Используется в рекурсивных вызовах; при первом вызове как правило равен единице.
            </param>
            <returns> Массив байт, содержащий байтовое представление <paramref name="strArgs"/>. </returns>
        </member>
        <member name="T:UseAsmCode.Extensions">
            <summary>
            Класс, предоставляющий методы расширения, используемые методами класса <see cref="T:UseAsmCode.SASMCode"/>.
            </summary>
        </member>
        <member name="M:UseAsmCode.Extensions.DoAndRemove``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            <para> Метод расширения, выполняющий заданные действия для каждого элемента последовательности, 
            удовлетворяющего заданному предикату, после чего удаляющий этот элемент из последовательности. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов последовательности. </typeparam>
            <param name="enumerable"> Последовательность, элементы которой требуется проверить на соответствие предикату. </param>
            <param name="Predicate"> Предикат, на соответствие которому требуется проверить элементы последовательности. </param>
            <param name="Act"> Действие, которое требуется совершить для каждого элемента последовательности, который соответствует предикату. </param>
        </member>
        <member name="M:UseAsmCode.Extensions.AddBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])">
            <summary>
            <para> Метод расширения, добавляющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> 
            один или несколько элементов перед заданным узлом <see cref="T:System.Collections.Generic.LinkedListNode`1"/>.
            Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, в который требуется добавить элементы. </param>
            <param name="node"> Узел, перед которым требуется добавить элементы. </param>
            <param name="values"> Значения, которые требуется добавить перед узлом <paramref name="node"/>. </param>
            <returns>  Узел, содержащий последнее добавленное значение из <paramref name="values"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.AddAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
        </member>
        <member name="M:UseAsmCode.Extensions.AddAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])">
            <summary>
            <para> Метод расширения, добавляющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> 
            один или несколько элементов после заданного узла <see cref="T:System.Collections.Generic.LinkedListNode`1"/>.
            Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, в который требуется добавить элементы. </param>
            <param name="node"> Узел, после которого требуется добавить элементы. </param>
            <param name="values"> Значения, которые требуется добавить после узла <paramref name="node"/>. </param>
            <returns>  Узел, содержащий последнее добавленное значение из <paramref name="values"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.AddBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> заданный узел <see cref="T:System.Collections.Generic.LinkedListNode`1"/>
            на узел, содержащий заданное значение, и возвращающий этот новый узел. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Узел, который требуется заменить. </param>
            <param name="newValue"> Новое значение, на которое требуется заменить узел <paramref name="oldValue"/>. </param>
            <returns> Добавленный узел, содержащий значение <paramref name="newValue"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> заданный узел <see cref="T:System.Collections.Generic.LinkedListNode`1"/>
            на один или несколько узлов, содержащих заданные значения. Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Узел, который требуется заменить. </param>
            <param name="newValues"> Новые значения, на которое требуется заменить узел <paramref name="oldValue"/>. </param>
            <returns> Узел, содержащий последнее добавленное значение из <paramref name="newValues"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> заданный узел <see cref="T:System.Collections.Generic.LinkedListNode`1"/>
            на один или несколько узлов, содержащих заданные значения. Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Узел, который требуется заменить. </param>
            <param name="newValues"> Новые значения, на которое требуется заменить узел <paramref name="oldValue"/>. </param>
            <returns> Узел, содержащий последнее добавленное значение из <paramref name="newValues"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> узел, содержащий заданное значение,
            на узел, содержащий заданное новое значение, и возвращающий этот новый узел. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Значение, которое содержится в узле, который требуется заменить. </param>
            <param name="newValue"> Новое значение, на которое требуется заменить узел, содержащий <paramref name="oldValue"/>. </param>
            <returns> Добавленный узел, содержащий значение <paramref name="newValue"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> узел, содержащий заданное значение,
            на один или несколько узлов, содержащих заданные новые значения.
            Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Значение, которое содержится в узле, который требуется заменить. </param>
            <param name="newValues"> Новые значения, на которые требуется заменить узел, содержащий <paramref name="oldValue"/>. </param>
            <returns> Узел, содержащий последнее добавленное значение из <paramref name="newValues"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <para> Метод расширения, заменяющий в <see cref="T:System.Collections.Generic.LinkedList`1"/> узел, содержащий заданное значение,
            на один или несколько узлов, содержащих заданные новые значения.
            Возвращает узел, содержащий последнее добавленное значение. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, узел которого требуется заменить. </param>
            <param name="oldValue"> Значение, которое содержится в узле, который требуется заменить. </param>
            <param name="newValues"> Новые значения, на которые требуется заменить узел, содержащий <paramref name="oldValue"/>. </param>
            <returns> Узел, содержащий последнее добавленное значение из <paramref name="newValues"/>. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0)"/>
            <seealso cref="M:UseAsmCode.Extensions.Replace``1(System.Collections.Generic.LinkedList{``0},``0,``0[])"/>
        </member>
        <member name="M:UseAsmCode.Extensions.RemoveAll``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            <para> Метод расширения, удаляющий из <see cref="T:System.Collections.Generic.LinkedList`1"/> все элементы, удовлетворяющие заданному предикату. </para>
            <para> Этот метод расширения меняет переданную последовательность. </para>
            </summary>
            <typeparam name="T"> Тип элементов связанного списка. </typeparam>
            <param name="list"> Связанный список, из которого требуется удалить элементы. </param>
            <param name="Predicate"> Предикат, определяющий, нужно ли удалить данный элемент из списка. </param>
        </member>
        <member name="M:UseAsmCode.Extensions.Add``1(``0,``0[])">
            <summary>
            <para> Метод расширения, формирующий массив из заданного первого элемента и элементов заданного массива. </para>
            <para> Этот метод расширения не меняет переданный массив. </para>
            </summary>
            <typeparam name="T"> Тип элементов массивов. </typeparam>
            <param name="element"> Первый элемент. </param>
            <param name="ToAdd"> Массив, элементы которого требуется добавить к <paramref name="element"/>. </param>
            <returns> 
            Новый массив, первым элементом которого является <paramref name="element"/>, 
            а последующие взяты из <paramref name="ToAdd"/> с сохранением порядка.
            </returns>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0[],``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0[],``0)"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Add``1(``0[],``0[])">
            <summary>
            <para> Метод расширения, производящий конкатенацию массивов. </para>
            <para> Этот метод расширения не меняет переданные массивы. </para>
            </summary>
            <typeparam name="T"> Тип элементов массивов. </typeparam>
            <param name="arr"> Первый массив для конкатенации. </param>
            <param name="ToAdd"> Второй массив для конкатенации. </param>
            <returns> Новый массив, содержащий элементы <paramref name="arr"/> и <paramref name="ToAdd"/> с соблюдением их порядка. </returns>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0[],``0)"/>
        </member>
        <member name="M:UseAsmCode.Extensions.Add``1(``0[],``0)">
            <summary>
            <para> Метод расширения, добавляющий к заданному массиву заданный последний элемент. </para>
            <para> Этот метод расширения не меняет переданный массив. </para>
            </summary>
            <typeparam name="T"> Тип элементов массивов. </typeparam>
            <param name="arr"> Массив, к которому требуется добавить последний элемент. </param>
            <param name="ToAdd"> Последний элемент, который требуется добавить к <paramref name="arr"/>. </param>
            <returns> 
            Новый массив, первые элементы которого взяты из <paramref name="ToAdd"/> 
            с сохранением их порядка, а последним является <paramref name="ToAdd"/>.
            </returns>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0,``0[])"/>
            <seealso cref="M:UseAsmCode.Extensions.Add``1(``0[],``0[])"/>
        </member>
        <member name="M:UseAsmCode.Extensions.GetInt(System.String)">
            <summary>
            Метод расширения, позволяющий получить из двоичного, десятичного или шестнадцатеричного строкового
            представления числа его числовое значение. Поддерживаются положительные и отрицательные числа,
            а основание системы счисления задаётся последним символом. <br/>
            <list type="bullet">
            <item>
            <term> Двоичная </term> :
            <description> b </description>
            </item><br/>
            <item>
            <term> Десятичная </term> :
            <description> d </description>
            </item><br/>
            <item>
            <term> Шестнадцатеричная </term> :
            <description> h </description>
            </item><br/>
            </list>
            </summary>
            <param name="str"> Строковое представление числа. </param>
            <returns> Числовое значение. </returns>
        </member>
        <member name="M:UseAsmCode.Extensions.IsHexDigit(System.Char)">
            <summary>
            Метод расширения, проверяющий, является ли данный символ шестнадцатеричной цифрой.
            </summary>
            <param name="c"> Символ, который требуется проверить. </param>
            <returns> Булево значение, демонстрирующее, является ли <paramref name="c"/> шестнадцатеричной цифрой. </returns>
        </member>
    </members>
</doc>
